#!/usr/bin/env python3
"""–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ LLM –¥–ª—è –æ–±—É—á–µ–Ω–∏—è GRPO."""

import json
import argparse
from collections import defaultdict
import matplotlib.pyplot as plt
import numpy as np


def load_logs(log_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    logs = []
    with open(log_file, 'r', encoding='utf-8') as f:
        for line in f:
            if line.strip():
                logs.append(json.loads(line))
    return logs


def analyze_rewards(logs):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ rewards"""
    rewards = [log['reward'] for log in logs if log['reward'] is not None]
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ rewards:")
    print(f"  –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {len(rewards)}")
    print(f"  –°—Ä–µ–¥–Ω–∏–π reward: {np.mean(rewards):.3f}")
    print(f"  –ú–µ–¥–∏–∞–Ω–Ω—ã–π reward: {np.median(rewards):.3f}")
    print(f"  –ú–∏–Ω reward: {np.min(rewards):.3f}")
    print(f"  –ú–∞–∫—Å reward: {np.max(rewards):.3f}")
    print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(rewards):.3f}")
    
    return rewards


def analyze_prompts(logs):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã"""
    print(f"\nüìù –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤:")
    print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {len(set(log['prompt'] for log in logs))}")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt_lengths = [len(log['prompt']) for log in logs]
    print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {np.mean(prompt_lengths):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  –ú–∏–Ω –¥–ª–∏–Ω–∞: {np.min(prompt_lengths)}")
    print(f"  –ú–∞–∫—Å –¥–ª–∏–Ω–∞: {np.max(prompt_lengths)}")


def analyze_completions(logs):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã LLM"""
    print(f"\nü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ LLM:")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
    completion_lengths = [len(log['completion']) for log in logs]
    print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {np.mean(completion_lengths):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  –ú–∏–Ω –¥–ª–∏–Ω–∞: {np.min(completion_lengths)}")
    print(f"  –ú–∞–∫—Å –¥–ª–∏–Ω–∞: {np.max(completion_lengths)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ rewards
    high_reward_logs = [log for log in logs if log['reward'] and log['reward'] > 1.5]
    print(f"  –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (reward > 1.5): {len(high_reward_logs)}")


def plot_reward_distribution(rewards, output_file="reward_distribution.png"):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è rewards"""
    plt.figure(figsize=(10, 6))
    plt.hist(rewards, bins=20, alpha=0.7, edgecolor='black')
    plt.xlabel('Reward')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Rewards')
    plt.grid(True, alpha=0.3)
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")


def export_sample_logs(logs, output_file="sample_logs.json", n_samples=10):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤"""
    sample_logs = logs[:n_samples]
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(sample_logs, f, ensure_ascii=False, indent=2)
    print(f"üìÑ –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")


def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ LLM')
    parser.add_argument('log_file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤')
    parser.add_argument('--output', '-o', default='analysis_output', help='–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--samples', '-s', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    
    args = parser.parse_args()
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏–∑ {args.log_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
    logs = load_logs(args.log_file)
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    rewards = analyze_rewards(logs)
    analyze_prompts(logs)
    analyze_completions(logs)
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
    if rewards:
        plot_reward_distribution(rewards, f"{args.output}_reward_distribution.png")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
    export_sample_logs(logs, f"{args.output}_samples.json", args.samples)
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{args.output}'")


if __name__ == "__main__":
    main()
