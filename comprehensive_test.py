"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã DC Circuit Analysis
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from dc_circuit.game import DCCircuitGame
from dc_circuit.generator import CircuitGenerator
from dc_circuit.solver import CircuitSolver
from dc_circuit.calculators import get_calculator_registry
from config import CircuitConfig, VerifierConfig


def test_physics_laws(circuit, node_voltages, metadata):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤ –ö–∏—Ä—Ö–≥–æ—Ñ–∞"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ KCL –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ (–∫—Ä–æ–º–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ ground)
    ground = metadata['ground_node']
    source_nodes = set()
    for (n_pos, n_neg) in metadata['voltage_sources'].keys():
        source_nodes.update([n_pos, n_neg])
    
    for node in metadata['nodes']:
        if node == ground or node in source_nodes:
            continue
        
        v_node = node_voltages.get(node, 0.0)
        i_in = 0.0
        i_out = 0.0
        
        for (n1, n2, r) in circuit.resistors:
            if n1 == node:
                i_out += (v_node - node_voltages.get(n2, 0.0)) / r
            elif n2 == node:
                i_in += (node_voltages.get(n1, 0.0) - v_node) / r
        
        if abs(i_in - i_out) > 0.01:  # 10mA –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            issues.append(f"KCL –Ω–∞—Ä—É—à–µ–Ω –≤ —É–∑–ª–µ {node}: I_in={i_in:.6f}A, I_out={i_out:.6f}A")
    
    return issues


def test_calculator(calc_name, circuit, node_voltages, metadata, target_resistor):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    solver = CircuitSolver()
    calculators = get_calculator_registry(solver, 3)
    
    if calc_name not in calculators:
        return None, f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä {calc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    calc = calculators[calc_name]
    
    try:
        result = calc.calculate(circuit, node_voltages, metadata, target_resistor)
        
        if result is None:
            return None, f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª None"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if calc_name == "current":
            if result < 0 or result > 1000:  # –¢–æ–∫–∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                return result, f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–∞: {result}A"
        elif calc_name == "voltage":
            source_voltage = list(metadata['voltage_sources'].values())[0]
            if result < 0 or result > source_voltage * 1.1:  # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                return result, f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {result}V (–∏—Å—Ç–æ—á–Ω–∏–∫ {source_voltage}V)"
        elif calc_name == "equivalent_resistance":
            if result <= 0 or result > 1e6:
                return result, f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {result}Œ©"
        
        return result, None
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞: {str(e)}"


def test_metadata_consistency(circuit, metadata):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ metadata —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç circuit"""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤
    metadata_count = len(metadata['resistors'])
    circuit_count = len(circuit.resistors)
    
    if metadata_count != circuit_count:
        issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤: metadata={metadata_count}, circuit={circuit_count}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã –∏–∑ metadata –µ—Å—Ç—å –≤ circuit
    for r_name, (n1, n2, r_val) in metadata['resistors'].items():
        found = False
        for (c_n1, c_n2, c_r) in circuit.resistors:
            if ((c_n1 == n1 and c_n2 == n2) or (c_n1 == n2 and c_n2 == n1)) and abs(c_r - r_val) < 0.01:
                found = True
                break
        if not found:
            issues.append(f"{r_name} ({n1}-{n2}, {r_val}Œ©) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ circuit")
    
    return issues


def comprehensive_test():
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("="*80)
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ DC CIRCUIT ANALYSIS")
    print("="*80)
    
    config = CircuitConfig()
    verifier_config = VerifierConfig()
    game = DCCircuitGame(config, verifier_config)
    gen = CircuitGenerator(config)
    solver = CircuitSolver()
    
    total_tests = 0
    passed_tests = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    for difficulty in [1, 2, 3]:
        circuit_types = ["series", "parallel", "mixed"]
        circuit_type = circuit_types[difficulty - 1]
        
        print(f"\n{'='*80}")
        print(f"üìä –°–õ–û–ñ–ù–û–°–¢–¨ {difficulty} ({circuit_type.upper()})")
        print(f"{'='*80}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        for test_num in range(3):
            print(f"\n  üî¨ –¢–µ—Å—Ç #{test_num + 1}:")
            total_tests += 1
            test_passed = True
            
            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
                circuit, q_type, metadata = gen.generate_circuit(difficulty=difficulty)
                
                print(f"    –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {q_type}")
                print(f"    –¶–µ–ª–µ–≤–æ–π —Ä–µ–∑–∏—Å—Ç–æ—Ä: {metadata['target_resistor']}")
                print(f"    –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {metadata['voltage_source']}V")
                print(f"    –†–µ–∑–∏—Å—Ç–æ—Ä–æ–≤: {len(metadata['resistors'])}")
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata consistency
                print(f"\n    ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata consistency:")
                issues = test_metadata_consistency(circuit, metadata)
                if issues:
                    print(f"      ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
                    for issue in issues:
                        print(f"         - {issue}")
                    test_passed = False
                else:
                    print(f"      ‚úÖ Metadata —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç circuit")
                
                # 2. –†–µ—à–µ–Ω–∏–µ —Ü–µ–ø–∏
                node_voltages = solver.solve(circuit)
                
                if not node_voltages:
                    print(f"      ‚ùå Solver –Ω–µ —Å–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ü–µ–ø—å")
                    test_passed = False
                    continue
                
                print(f"      ‚úÖ –¶–µ–ø—å —Ä–µ—à–µ–Ω–∞ ({len(node_voltages)} —É–∑–ª–æ–≤)")
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–≤
                print(f"\n    ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤ –ö–∏—Ä—Ö–≥–æ—Ñ–∞:")
                physics_issues = test_physics_laws(circuit, node_voltages, metadata)
                if physics_issues:
                    print(f"      ‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è:")
                    for issue in physics_issues:
                        print(f"         - {issue}")
                    test_passed = False
                else:
                    print(f"      ‚úÖ KCL –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —É–∑–ª–æ–≤")
                
                # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
                print(f"\n    ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤:")
                target = metadata['target_resistor']
                
                for calc_name in ['current', 'voltage', 'equivalent_resistance']:
                    result, error = test_calculator(calc_name, circuit, node_voltages, metadata, target)
                    
                    if error:
                        print(f"      ‚ùå {calc_name}: {error}")
                        test_passed = False
                    else:
                        print(f"      ‚úÖ {calc_name}: {result}")
                
                # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ game.generate (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)
                print(f"\n    ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (game.generate):")
                data_list = game.generate(num_of_questions=1, difficulty=difficulty)
                
                if not data_list:
                    print(f"      ‚ùå game.generate –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                    test_passed = False
                else:
                    data = data_list[0]
                    print(f"      ‚úÖ –ó–∞–¥–∞—á–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                    print(f"         –û—Ç–≤–µ—Ç: {data.answer}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    test_response = f"<think>test</think><answer>{data.answer}</answer>"
                    is_correct = game.verify(data, test_response)
                    
                    if is_correct:
                        print(f"      ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print(f"      ‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        test_passed = False
                
                # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ü–µ–ø–∏
                print(f"\n    ‚úì –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {circuit_type}:")
                
                if circuit_type == "series":
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã
                    currents = []
                    for (n1, n2, r) in circuit.resistors:
                        v1 = node_voltages.get(n1, 0.0)
                        v2 = node_voltages.get(n2, 0.0)
                        i = abs(v1 - v2) / r
                        currents.append(i)
                    
                    if len(set([round(i, 4) for i in currents])) == 1:
                        print(f"      ‚úÖ –¢–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã: {currents[0]:.6f}A")
                    else:
                        print(f"      ‚ùå –¢–æ–∫–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è: {[f'{i:.6f}' for i in currents]}")
                        test_passed = False
                
                elif circuit_type == "parallel":
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –Ω–∞ –≤—Å–µ—Ö —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞—Ö
                    if len(metadata['nodes']) == 2:  # –ü—Ä–æ—Å—Ç–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ü–µ–ø—å
                        n1, n2 = metadata['nodes']
                        v_diff = abs(node_voltages.get(n1, 0) - node_voltages.get(n2, 0))
                        v_source = metadata['voltage_source']
                        
                        if abs(v_diff - v_source) < 0.01:
                            print(f"      ‚úÖ –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞—Ö: {v_diff:.3f}V")
                        else:
                            print(f"      ‚ùå –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {v_diff:.3f}V != {v_source}V")
                            test_passed = False
                    else:
                        print(f"      ‚ö†Ô∏è  –°–ª–æ–∂–Ω–∞—è —Ç–æ–ø–æ–ª–æ–≥–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                
                elif circuit_type == "mixed":
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –µ—Å—Ç—å –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                    # –°—á–∏—Ç–∞–µ–º —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã –º–µ–∂–¥—É –æ–¥–Ω–∏–º–∏ —É–∑–ª–∞–º–∏
                    node_pairs = {}
                    for (n1, n2, r) in circuit.resistors:
                        key = tuple(sorted([n1, n2]))
                        node_pairs[key] = node_pairs.get(key, 0) + 1
                    
                    has_parallel = any(count > 1 for count in node_pairs.values())
                    has_series = len(circuit.resistors) > max(node_pairs.values())
                    
                    if has_parallel:
                        print(f"      ‚úÖ –ï—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã")
                    else:
                        print(f"      ‚ö†Ô∏è  –ù–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)")
                    
                    if has_series:
                        print(f"      ‚úÖ –ï—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã")
                
                if test_passed:
                    passed_tests += 1
                    print(f"\n    ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"\n    ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
                
            except Exception as e:
                print(f"      ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
                import traceback
                traceback.print_exc()
                test_passed = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*80}")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests / total_tests * 100:.1f}%")
    
    if passed_tests == total_tests:
        print(f"\n  üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    else:
        print(f"\n  ‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
    
    print(f"{'='*80}")
    
    return passed_tests == total_tests


if __name__ == "__main__":
    success = comprehensive_test()
    sys.exit(0 if success else 1)
