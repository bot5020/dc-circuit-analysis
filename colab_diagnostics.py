#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø COLAB
–ó–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –í COLAB –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
"""
import sys
import os
import shutil
from pathlib import Path


print("=" * 80)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê COLAB –ü–ï–†–ï–î –û–ë–£–ß–ï–ù–ò–ï–ú")
print("=" * 80)

# 1. –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê
print("\n1Ô∏è‚É£  –û–ß–ò–°–¢–ö–ê PYTHON –ö–≠–®–ê:")
cache_dirs = list(Path('.').rglob('__pycache__'))
pyc_files = list(Path('.').rglob('*.pyc'))

print(f"   –ù–∞–π–¥–µ–Ω–æ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(cache_dirs)}")
print(f"   –ù–∞–π–¥–µ–Ω–æ *.pyc —Ñ–∞–π–ª–æ–≤: {len(pyc_files)}")

if cache_dirs or pyc_files:
    print("   üßπ –£–¥–∞–ª—è—é –∫—ç—à...")
    for cache_dir in cache_dirs:
        try:
            shutil.rmtree(cache_dir)
            print(f"      ‚úÖ –£–¥–∞–ª–µ–Ω: {cache_dir}")
        except:
            pass
    
    for pyc in pyc_files:
        try:
            pyc.unlink()
        except:
            pass
    
    print("   ‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!")
else:
    print("   ‚úÖ –ö—ç—à —É–∂–µ —á–∏—Å—Ç")

# 2. –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò solver.py
print("\n2Ô∏è‚É£  –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò solver.py:")

solver_path = Path("dc_circuit/solver.py")
if solver_path.exists():
    content = solver_path.read_text()
    
    # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    markers = {
        "_order_series_resistors": "‚úÖ –ú–µ—Ç–æ–¥ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤",
        "V_node1 = node_voltages.get(node1": "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π get_current (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç node1/node2 –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)",
        "def _find_path": "‚úÖ –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ"
    }
    
    print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
    all_ok = True
    for marker, description in markers.items():
        if marker in content:
            print(f"      ‚úÖ {description}")
        else:
            print(f"      ‚ùå {description} - –ù–ï –ù–ê–ô–î–ï–ù!")
            all_ok = False
    
    if all_ok:
        print("\n   ‚úÖ solver.py —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
    else:
        print("\n   ‚ùå solver.py –ù–ï–ü–û–õ–ù–´–ô! –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Git!")
        print("   –í—ã–ø–æ–ª–Ω–∏: !git pull")
else:
    print("   ‚ùå solver.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# 3. –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò
print("\n3Ô∏è‚É£  –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –î–ê–ù–ù–´–•:")

try:
    sys.path.insert(0, '.')
    
    from dc_circuit.game import DCCircuitGame
    from dc_circuit.solver import Circuit, CircuitSolver
    from dc_circuit.calculators.voltage import VoltageCalculator
    import random
    
    print("   –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...")
    
    # –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–∞–¥–∞—á–∏
    circuit = Circuit()
    circuit.add_voltage_source("A", "C", 9.0)
    circuit.set_ground("C")
    circuit.add_resistor("A", "B", 44.0)
    circuit.add_resistor("B", "C", 94.0)
    
    solver = CircuitSolver()
    node_voltages = solver.solve(circuit)
    
    metadata = {'resistors': {'R1': ('A', 'B', 44.0), 'R2': ('B', 'C', 94.0)}}
    voltage_calc = VoltageCalculator(solver, 3)
    answer = voltage_calc.calculate(circuit, node_voltages, metadata, 'R2')
    
    # –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç
    expected = round(9.0 / 138.0 * 94.0, 3)
    
    print(f"\n   –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: V=9V, R1=44Œ©, R2=94Œ©")
    print(f"   –í–æ–ø—Ä–æ—Å: –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ R2")
    print(f"   –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã: {answer} V")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π:     {expected} V")
    
    if abs(answer - expected) < 0.001:
        print(f"   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print(f"   ‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        print(f"   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞ –∏–ª–∏ –∫—ç—à –Ω–µ –æ—á–∏—â–µ–Ω!")
        
except Exception as e:
    print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
    print(f"   –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

# 4. –ü–†–û–í–ï–†–ö–ê RUNTIME
print("\n4Ô∏è‚É£  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û RUNTIME:")
print(f"   Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"   sys.path:")
for p in sys.path[:5]:
    print(f"      {p}")

# 5. –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ú–û–î–£–õ–ï–ô
print("\n5Ô∏è‚É£  –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ú–û–î–£–õ–ï–ô:")
print("   ‚ö†Ô∏è  –ï—Å–ª–∏ —Ç—ã —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –º–æ–¥—É–ª–∏ –≤ Colab:")
print("      –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–º—è—Ç–∏!")
print()
print("   üîÑ –î–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–∏:")
print("      import importlib")
print("      import sys")
print()
print("      # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏")
print("      modules_to_remove = [k for k in sys.modules.keys() if k.startswith('dc_circuit') or k.startswith('base') or k.startswith('training')]")
print("      for module in modules_to_remove:")
print("          del sys.modules[module]")
print()
print("      # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
print("      from training.rl_trainer import DCCircuitRLTrainer")

# 6. –ò–¢–û–ì
print("\n" + "=" * 80)
print("üìã –ß–ï–ö–õ–ò–°–¢ –ü–ï–†–ï–î –û–ë–£–ß–ï–ù–ò–ï–ú –í COLAB")
print("=" * 80)

print("""
–í–´–ü–û–õ–ù–ò –≠–¢–ò –®–ê–ì–ò –í COLAB:

1. üîÑ –û–ë–ù–û–í–ò –ö–û–î –ò–ó GIT:
   !git pull origin main
   
2. üßπ –û–ß–ò–°–¢–ò –ö–≠–®:
   !find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null
   !find . -name "*.pyc" -delete 2>/dev/null
   
3. üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò RUNTIME:
   Runtime ‚Üí Restart runtime (–í–ê–ñ–ù–û!)
   
4. ‚úÖ –ó–ê–ü–£–°–¢–ò –≠–¢–û–¢ –°–ö–†–ò–ü–¢:
   !python colab_diagnostics.py
   
5. üéØ –ï–°–õ–ò –í–°–ï ‚úÖ - –ó–ê–ü–£–°–ö–ê–ô –û–ë–£–ß–ï–ù–ò–ï:
   from training.rl_trainer import DCCircuitRLTrainer
   trainer = DCCircuitRLTrainer()
   trainer.run()

‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
   - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ä—ã–µ —è—á–µ–π–∫–∏ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏!
   - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ runtime –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º!
   - –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ—Å—Ç (—à–∞–≥ 3Ô∏è‚É£) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 6.13 V, –∞ –Ω–µ 3.977 V
""")

print("\n" + "=" * 80)
print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
print("=" * 80)
