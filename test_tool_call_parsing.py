#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ tool_call –æ—Ç–≤–µ—Ç–æ–≤."""

import re


def parse_tool_call_response(completion_str):
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –∏–∑ tool_call —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        # –ò—â–µ–º <answer>X.XXX</answer> –≤–Ω—É—Ç—Ä–∏ tool_call
        answer_match = re.search(r'<answer>([0-9.-]+)</answer>', completion_str)
        if answer_match:
            return answer_match.group(1)
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None


def test_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    # –ü—Ä–∏–º–µ—Ä—ã tool_call –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
    test_cases = [
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π tool_call —Å answer",
            "completion": """<tool_call>
Step 1: This is a series circuit
Step 2: Total resistance R_total = R1 + R2 = 4Œ© + 8Œ© = 12Œ©
Step 3: Current I = V/R_total = 12V/12Œ© = 1.000A
Step 4: In series, current through R1 equals total current = 1.000A
</tool_call>
<answer>1.000</answer>""",
            "expected": "1.000"
        },
        {
            "name": "Tool_call –±–µ–∑ answer",
            "completion": """<tool_call>
Step 1: This is a series circuit
Step 2: Total resistance R_total = R1 + R2 = 4Œ© + 8Œ© = 12Œ©
Step 3: Current I = V/R_total = 12V/12Œ© = 1.000A
</tool_call>""",
            "expected": None
        },
        {
            "name": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç think/answer",
            "completion": """<think>
Step 1: This is a series circuit
Step 2: Total resistance R_total = R1 + R2 = 4Œ© + 8Œ© = 12Œ©
Step 3: Current I = V/R_total = 12V/12Œ© = 1.000A
</think>
<answer>1.000</answer>""",
            "expected": "1.000"
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ tool_call –æ—Ç–≤–µ—Ç–æ–≤\n")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"–í—Ö–æ–¥: {test_case['completion'][:100]}...")
        
        result = parse_tool_call_response(test_case['completion'])
        expected = test_case['expected']
        
        if result == expected:
            print(f"‚úÖ –£—Å–ø–µ—Ö: {result}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {result}")
        
        print("-" * 50)


if __name__ == "__main__":
    test_parsing()
