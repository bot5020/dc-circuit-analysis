#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è correct_answer –≤ RL –æ–±—É—á–µ–Ω–∏–∏"""

from dc_circuit.game import DCCircuitGame
from config import CircuitConfig, VerifierConfig

print("=" * 80)
print("–ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–•: –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
print("=" * 80)

# –°–æ–∑–¥–∞–µ–º game –∫–∞–∫ –≤ RL trainer
circuit_config = CircuitConfig()
verifier_config = VerifierConfig()
game = DCCircuitGame(circuit_config, verifier_config)

print("\n1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ (–∫–∞–∫ –≤ DCCircuitDataset._generate_data):")
data_list = game.generate(num_of_questions=5, difficulty=1)

print(f"\n   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(data_list)} –∑–∞–¥–∞—á\n")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Data.answer –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏:\n")

for i, data in enumerate(data_list):
    print(f"{'='*70}")
    print(f"–ó–ê–î–ê–ß–ê #{i+1}")
    print(f"{'='*70}")
    
    metadata = data.metadata
    V = metadata.get('voltage_source')
    resistors = metadata.get('resistors', {})
    target = metadata.get('target_resistor')
    question_type = metadata.get('question_type')
    
    print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ø–∏:")
    print(f"   V = {V} V")
    for name, (n1, n2, R) in resistors.items():
        print(f"   {name} ({n1}-{n2}) = {R} Œ©")
    print(f"   –í–æ–ø—Ä–æ—Å: {question_type} –Ω–∞ {target}")
    
    print(f"\nüìù –û—Ç–≤–µ—Ç –∏–∑ Data.answer: {data.answer}")
    
    # –†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if question_type == 'voltage' and metadata.get('circuit_type') == 'series':
        R_total = sum(r[2] for r in resistors.values())
        I = V / R_total
        target_R = resistors[target][2]
        V_manual = I * target_R
        
        print(f"\nüßÆ –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç:")
        print(f"   R_total = {R_total} Œ©")
        print(f"   I = {V}/{R_total} = {I:.6f} A")
        print(f"   V({target}) = {I:.6f} √ó {target_R} = {V_manual:.6f} V")
        print(f"   –û–∫—Ä—É–≥–ª–µ–Ω–æ: {round(V_manual, 3)} V")
        
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"   Data.answer:    {data.answer}")
        print(f"   –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç:  {round(V_manual, 3)}")
        
        if abs(float(data.answer) - round(V_manual, 3)) < 0.001:
            print(f"   ‚úÖ –°–û–í–ü–ê–î–ê–Æ–¢")
        else:
            print(f"   ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢! –†–∞–∑–Ω–∏—Ü–∞: {abs(float(data.answer) - round(V_manual, 3)):.6f}")
    
    print()

print("\n" + "=" * 80)
print("3Ô∏è‚É£ –≠–º—É–ª–∏—Ä—É–µ–º DCCircuitDataset (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):")
print("=" * 80)

dataset_items = []
for data in data_list:
    # –¢–∞–∫–æ–µ –∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ DCCircuitDataset.__init__
    item = {
        "question": data.question,
        "answer": f"{float(data.answer):.3f}",  # ‚Üê –ó–î–ï–°–¨ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
        "difficulty": data.difficulty
    }
    dataset_items.append(item)

print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
for i, item in enumerate(dataset_items[:3]):  # –ü–µ—Ä–≤—ã–µ 3
    print(f"\n   –ó–∞–¥–∞—á–∞ #{i+1}:")
    print(f"   answer –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {item['answer']}")

print("\n" + "=" * 80)
print("4Ô∏è‚É£ –≠–º—É–ª–∏—Ä—É–µ–º reward_function (–≥–¥–µ –±–µ—Ä–µ—Ç—Å—è correct_answer):")
print("=" * 80)

# –ö–∞–∫ –≤ reward_function:
idx = 0
if idx < len(dataset_items):
    correct_answer = dataset_items[idx]["answer"]
    print(f"\n   correct_answer = dataset[{idx}]['answer'] = {correct_answer}")
    print(f"\n   ‚Üê –≠–¢–û –ó–ù–ê–ß–ï–ù–ò–ï –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ª–æ–≥–∏ –∫–∞–∫ 'correct_answer'")

print("\n" + "=" * 80)
print("–ò–¢–û–ì:")
print("=" * 80)

print("\n–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—ã—à–µ:")
print("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –≤ DCCircuitGame._calculate_answer()")
print("\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ:")
print("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—ç—à–µ")
print("\n" + "=" * 80)
