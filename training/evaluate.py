"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è baseline –∏ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pickle
import json
from typing import Dict, List
from training.datasets import DCCircuitDataset
from training.utils import LMStudioClient
from base.data import Data
from dc_circuit.game import DCCircuitGame

# matplotlib –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
matplotlib = None


def evaluate_model_on_datasets(model_path: str,
                              test_datasets: Dict[int, DCCircuitDataset],
                              batch_size: int = 50) -> Dict[int, float]:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É—è API

    Args:
        model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        test_datasets: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        batch_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–∂–Ω–æ—Å—Ç—å: —Ç–æ—á–Ω–æ—Å—Ç—å}
    """
    print(f"üî• –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å: {model_path}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LM Studio –∫–ª–∏–µ–Ω—Ç
    lm_studio_client = LMStudioClient()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LM Studio —Å–µ—Ä–≤–µ—Ä–∞
    if not lm_studio_client.health_check():
        print("‚ùå LM Studio —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:1234")
        return {}

    # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω—â–∏–∫ –º–æ–¥–µ–ª–∏
    evaluator = ModelEvaluator(lm_studio_client)

    results = {}

    for difficulty, dataset in test_datasets.items():
        print(f"üìä –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty}...")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ Data –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        test_data = []
        for i in range(min(len(dataset), batch_size)):
            item = dataset[i]
            data_obj = Data(
                question=item["question"],
                answer=item["answer"],
                difficulty=difficulty
            )
            test_data.append(data_obj)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ
        eval_results = evaluator.evaluate_on_dataset(test_data, batch_size)
        accuracy = eval_results["accuracy"]
        correct = eval_results["correct"]
        total = eval_results["total"]

        results[difficulty] = accuracy
        print(f"‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty}: {accuracy:.3f} ({correct}/{total})")

    return results


class ModelEvaluator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LM Studio API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    """

    def __init__(self, lm_studio_client: LMStudioClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞ –º–æ–¥–µ–ª–∏

        Args:
            lm_studio_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio API
        """
        self.lm_studio_client = lm_studio_client
        self.system_prompt = self._get_system_prompt()

    def _get_system_prompt(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞
        """
        return (
            "You are an expert circuit analysis engineer. Solve electrical circuit problems using physics laws.\n\n"
            "Respond in the following format:\n"
            "<think>Reason step by step briefly.</think>\n"
            "<answer>Return ONLY the final number with exactly 3 decimal places (e.g., 1.234), no units.</answer>"
        )

    def generate_response(self, question: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LM Studio API

        Args:
            question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞

        Returns:
            –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        full_prompt = f"{self.system_prompt}\n\nQuestion: {question}\nAnswer:"

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LM Studio API
            response = self.lm_studio_client.generate(
                prompt=full_prompt,
                max_tokens=128,
                temperature=0.0,  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                stop_sequences=["\n", " "]  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–∞—Ö
            )
            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return ""

    def evaluate_on_dataset(self, test_data: List[Data], max_samples: int = 100) -> Dict:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö

        Args:
            test_data: –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            max_samples: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {"accuracy": float, "correct": int, "total": int}
        """
        correct_count = 0
        total_count = min(len(test_data), max_samples)

        print(f"üìä –û—Ü–µ–Ω–∏–≤–∞–µ–º {total_count} –æ–±—Ä–∞–∑—Ü–æ–≤...")

        for i, data_item in enumerate(test_data[:total_count]):
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–∑—Ü–æ–≤
            if i % 10 == 0:
                print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {i}/{total_count}...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            model_response = self.generate_response(data_item.question)

            if not model_response:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            game = DCCircuitGame()
            test_data_obj = Data(
                question=data_item.question,
                answer=data_item.answer,
                difficulty=data_item.difficulty
            )

            if game.verify(test_data_obj, model_response):
                correct_count += 1

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        accuracy = correct_count / total_count if total_count > 0 else 0.0

        return {
            "accuracy": accuracy,
            "correct": correct_count,
            "total": total_count
        }


def load_test_datasets() -> Dict[int, DCCircuitDataset]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-10) –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ pickle —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–∂–Ω–æ—Å—Ç—å: –¥–∞—Ç–∞—Å–µ—Ç}
    """
    datasets = {}

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10
    for difficulty in range(1, 11):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            with open(f"test_dataset_difficulty_{difficulty}.pkl", "rb") as f:
                data_list = pickle.load(f)
                datasets[difficulty] = DCCircuitDataset(data_list)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {difficulty}: {len(data_list)} –æ–±—Ä–∞–∑—Ü–æ–≤")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –î–∞—Ç–∞—Å–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {difficulty} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return datasets


def compare_models(baseline_model: str = "Qwen/Qwen2.5-1.5B-Instruct",
                   trained_model: str = "./dc_circuit_model") -> tuple[Dict[int, float], Dict[int, float]]:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç baseline –∏ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–∏—Ö,
    –≤–æ–∑–≤—Ä–∞—â–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    Args:
        baseline_model: –ù–∞–∑–≤–∞–Ω–∏–µ baseline –º–æ–¥–µ–ª–∏
        trained_model: –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_baseline, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–æ–±—É—á–µ–Ω–Ω–æ–π_–º–æ–¥–µ–ª–∏)
    """
    print("üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    test_datasets = load_test_datasets()

    if not test_datasets:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö.")
        return {}, {}

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º baseline –º–æ–¥–µ–ª—å
    print(f"üìä –û—Ü–µ–Ω–∏–≤–∞–µ–º baseline –º–æ–¥–µ–ª—å: {baseline_model}")
    baseline_results = evaluate_model_on_datasets(baseline_model, test_datasets)

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print(f"üìä –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {trained_model}")
    trained_results = evaluate_model_on_datasets(trained_model, test_datasets)

    return baseline_results, trained_results


def generate_full_report(baseline_model: str = "Qwen/Qwen2.5-1.5B-Instruct",
                        trained_model: str = "./dc_circuit_model") -> tuple[Dict[int, float], Dict[int, float]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π

    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è,
    —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON

    Args:
        baseline_model: Baseline –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        trained_model: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

    Returns:
        –ö–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
    """
    print("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ü–µ–Ω–∫–∏...")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    baseline_results, trained_results = compare_models(baseline_model, trained_model)

    if not baseline_results or not trained_results:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏")
        return {}, {}

    # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulties = sorted(set(baseline_results.keys()) & set(trained_results.keys()))
    improvements = {}

    for difficulty in difficulties:
        baseline_acc = baseline_results[difficulty]
        trained_acc = trained_results[difficulty]
        improvement = trained_acc - baseline_acc
        improvements[difficulty] = improvement

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        status = "üìà" if improvement > 0 else "üìâ" if improvement < 0 else "‚û°Ô∏è"
        print(f"{status} –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty}: {baseline_acc:.3f} ‚Üí {trained_acc:.3f} ({improvement:.3f})")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if improvements:
        avg_improvement = sum(improvements.values()) / len(improvements)
        print(f"\nüéØ –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {avg_improvement:.3f}")

        if avg_improvement > 0:
            print("üéâ –£–°–ü–ï–•: –ú–æ–¥–µ–ª—å —É–ª—É—á—à–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è!")
        else:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ —É–ª—É—á—à–∏–ª–∞—Å—å. –ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.")

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        import matplotlib.pyplot as plt
        plt.figure(figsize=(12, 6))

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        plt.subplot(1, 2, 1)
        plt.plot(difficulties, [baseline_results[d] for d in difficulties],
                'o-', label='Baseline', color='blue')
        plt.plot(difficulties, [trained_results[d] for d in difficulties],
                'o-', label='–û–±—É—á–µ–Ω–Ω–∞—è', color='green')
        plt.xlabel('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
        plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
        plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π')
        plt.legend()
        plt.grid(True)

        # –ì—Ä–∞—Ñ–∏–∫ —É–ª—É—á—à–µ–Ω–∏–π
        plt.subplot(1, 2, 2)
        plt.bar(difficulties, [improvements[d] for d in difficulties],
               color=['green' if x > 0 else 'red' for x in improvements.values()])
        plt.xlabel('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
        plt.ylabel('–£–ª—É—á—à–µ–Ω–∏–µ')
        plt.title('–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è')
        plt.grid(True)

        plt.tight_layout()
        plt.savefig('reports/model_comparison.png', dpi=300, bbox_inches='tight')
        print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: reports/model_comparison.png")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    results_data = {
        "baseline_model": baseline_model,
        "trained_model": trained_model,
        "baseline_results": baseline_results,
        "trained_results": trained_results,
        "improvements": improvements,
        "avg_improvement": avg_improvement if improvements else 0
    }

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é reports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)
    with open("reports/evaluation_results.json", "w", encoding="utf-8") as f:
        json.dump(results_data, f, ensure_ascii=False, indent=2)

    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: reports/evaluation_results.json")

    return baseline_results, trained_results