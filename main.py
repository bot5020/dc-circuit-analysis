"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DC Circuit Analysis Environment

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
- –ü–æ–∫–∞–∑ –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∞
- –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from dc_circuit.game import DCCircuitGame
from config import CircuitConfig, VerifierConfig
from base.utils import get_system_prompt

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SAMPLES_PER_DIFFICULTY = 1
DIFFICULTIES = [1, 2]


def demo_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç–æ–º.
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç:
    - –ü—Ä–æ–º–ø—Ç –∑–∞–¥–∞—á–∏
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—Ç–∏–ø —Ü–µ–ø–∏, —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞)
    """
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    circuit_config = CircuitConfig()
    verifier_config = VerifierConfig()
    game = DCCircuitGame(circuit_config, verifier_config)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    for difficulty in DIFFICULTIES:
        print(f"\n--- –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty} ---")

        data_list = game.generate(num_of_questions=SAMPLES_PER_DIFFICULTY, difficulty=difficulty)

        if data_list:
            data = data_list[0]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            print(f"üìù –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏:")
            print("=" * 60)
            print("SYSTEM MESSAGE:")
            print(get_system_prompt())
            print("\nUSER MESSAGE:")
            print(data.question)
            print("=" * 60)
            
            print(f"\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data.answer}")
            print(f"üìä –¢–∏–ø —Ü–µ–ø–∏: {data.metadata.get('circuit_type', 'unknown')}")
            print(f"üìä –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {data.metadata.get('question_type', 'unknown')}")
            print("-" * 50)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")



def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DC Circuit Analysis.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    —Å –¥–≤—É–º—è —É—Ä–æ–≤–Ω—è–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-2).
    """
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DC Circuit Analysis")
        print("=" * 50)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        demo_generation()

        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")

if __name__ == "__main__":
    main()