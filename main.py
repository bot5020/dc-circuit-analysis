#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã DC Circuit Analysis Environment

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è
- –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from dc_circuit.game import DCCircuitGame
from training.datasets import create_training_dataset, DCCircuitDataset
from training.evaluate import generate_full_report
from training.rl_trainer import DCCircuitRLTrainer, TrainingConfig
from config.models import get_model_name


def demo_circuit_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ó–ê–î–ê–ß ===\n")

    game = DCCircuitGame()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    for difficulty in [1, 3, 5]:
        print(f"--- –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty} ---")

        data_list = game.generate(num_of_questions=1, difficulty=difficulty)

        if data_list:
            data = data_list[0]
            print("–ó–∞–¥–∞—á–∞:")
            print(data.question)
            print(f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data.answer}")
            print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {data.metadata['circuit_type']}, "
                  f"{data.metadata['question_type']}")
            print("\n" + "="*50 + "\n")


def demo_basic_generation():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á (–∏–∑ simple_demo.py)"""
    print("=== –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò ===\n")

    game = DCCircuitGame()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 1...")
    tasks = game.generate(num_of_questions=1, difficulty=1)

    if tasks:
        task = tasks[0]
        print(f"–í–æ–ø—Ä–æ—Å: {task.question}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}")
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        print("\n–ü—Ä–æ–≤–µ—Ä–∏–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä...")
        verifier = game.verifier

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        is_correct = verifier.verify(task, f"<answer>{task.answer}</answer>")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚úÖ –í–ï–†–ù–û' if is_correct else '‚ùå –ù–ï–í–ï–†–ù–û'}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        is_correct = verifier.verify(task, "<answer>999.999</answer>")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚úÖ –í–ï–†–ù–û' if is_correct else '‚ùå –ù–ï–í–ï–†–ù–û'}")

    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á")


def demo_different_difficulties():
    """–î–µ–º–æ –∑–∞–¥–∞—á —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–∏–∑ simple_demo.py)"""
    print("\n=== –†–ê–ó–ù–´–ï –£–†–û–í–ù–ò –°–õ–û–ñ–ù–û–°–¢–ò ===\n")

    game = DCCircuitGame()

    for difficulty in [1, 3, 5]:
        print(f"--- –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty} ---")
        tasks = game.generate(num_of_questions=1, difficulty=difficulty)

        if tasks:
            task = tasks[0]
            print(f"–í–æ–ø—Ä–æ—Å: {task.question[:100]}...")
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}")
            print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {task.metadata.get('circuit_type', 'unknown')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print()


def demo_verification():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===\n")
    
    game = DCCircuitGame()
    data_list = game.generate(num_of_questions=1, difficulty=1)
    
    if data_list:
        data = data_list[0]
        print("–ó–∞–¥–∞—á–∞:")
        print(data.question)
        print(f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data.answer}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        test_cases = [
            f"The answer is {data.answer}",
            f"<answer>{data.answer}</answer>",
            f"After calculations: = {data.answer} A",
            "Wrong answer: 999.999",
            "<answer>not_a_number</answer>"
        ]
        
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        for i, test_answer in enumerate(test_cases, 1):
            is_correct = game.verify(data, test_answer)
            print(f"{i}. '{test_answer}' -> {'‚úì' if is_correct else '‚úó'}")


def test_model_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ –±–µ–∑ vLLM (–∏–∑ simple_demo.py)"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò ===\n")

    try:
        from transformers import AutoTokenizer, AutoModelForCausalLM

        model_name = get_model_name("debug")
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_name}")

        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ vLLM (–∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            trust_remote_code=True,
            torch_dtype="auto",
            device_map="cpu"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        game = DCCircuitGame()
        tasks = game.generate(num_of_questions=1, difficulty=1)

        if tasks:
            task = tasks[0]
            prompt = f"Solve this circuit problem:\n{task.question}\n\nAnswer:"

            inputs = tokenizer(prompt, return_tensors="pt")
            outputs = model.generate(**inputs, max_length=inputs['input_ids'].shape[1] + 50, do_sample=True)
            response = tokenizer.decode(outputs[0], skip_special_tokens=True)

            print(f"–ó–∞–¥–∞—á–∞: {task.question}")
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}")
            print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response[len(prompt):]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            verifier = game.verifier()
            is_correct = verifier.verify(task, response)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–ï–†–ù–û' if is_correct else '‚ùå –ù–ï–í–ï–†–ù–û'}")

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install transformers torch")


def run_simple_training():
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–∏–∑ simple_demo.py)"""
    print("=== –ü–†–û–°–¢–û–ï –û–ë–£–ß–ï–ù–ò–ï ===\n")

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        print("1. –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç...")
        train_data = create_training_dataset(
            difficulties=[1, 3],
            samples_per_difficulty=10
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(train_data)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        import pickle
        os.makedirs("datasets", exist_ok=True)
        with open("datasets/simple_train.pkl", "wb") as f:
            pickle.dump(train_data, f)
        print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ datasets/simple_train.pkl")

        print("\n2. –î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python training/grpo.py")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")


def validate_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("=== –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ ===\n")

    game = DCCircuitGame()

    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á...")
    for difficulty in [1, 3, 5]:
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty}:")
        tasks = game.generate(num_of_questions=3, difficulty=difficulty, max_attempts=20)

        if not tasks:
            print("      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏")
            continue

        print(f"      ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        task = tasks[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á–∏
        if not hasattr(task, 'question') or not task.question:
            print("      ‚ùå –ó–∞–¥–∞—á–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞")
            continue
        if not hasattr(task, 'answer') or not task.answer:
            print("      ‚ùå –ó–∞–¥–∞—á–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞")
            continue
        if not hasattr(task, 'difficulty') or task.difficulty != difficulty:
            print("      ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
            continue

        print(f"      üìù –í–æ–ø—Ä–æ—Å: {task.question[:50]}...")
        print(f"      ‚úÖ –û—Ç–≤–µ—Ç: {task.answer}")

    # –¢–µ—Å—Ç 2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...")
    test_task = game.generate(num_of_questions=1, difficulty=1, max_attempts=20)[0]

    test_cases = [
        (f"<answer>{test_task.answer}</answer>", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–≥–∞—Ö"),
        (f"Answer: {test_task.answer}", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º"),
        ("999.999", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
        ("–Ω–µ —á–∏—Å–ª–æ", "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
    ]

    for test_answer, description in test_cases:
        is_correct = game.verify(test_task, test_answer)
        status = "‚úÖ" if is_correct else "‚ùå"
        print(f"   {status} {description}: '{test_answer}'")

    # –¢–µ—Å—Ç 3: –†–µ—à–µ–Ω–∏–µ —Ü–µ–ø–µ–π
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ —Ü–µ–ø–µ–π...")
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
        simple_task = game.generate(num_of_questions=1, difficulty=1, max_attempts=20)[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = simple_task.metadata
        if metadata and "resistors" in metadata:
            print(f"   ‚úÖ –¶–µ–ø—å —Å–æ–¥–µ—Ä–∂–∏—Ç {len(metadata['resistors'])} —Ä–µ–∑–∏—Å—Ç–æ—Ä–æ–≤")
            print(f"   üìä –¢–∏–ø —Ü–µ–ø–∏: {metadata.get('circuit_type', 'unknown')}")
            print(f"   ‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {metadata.get('question_type', 'unknown')}")
        else:
            print("   ‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞—Ö")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    try:
        small_dataset = create_training_dataset(
            difficulties=[1, 2],
            samples_per_difficulty=5
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(small_dataset)} –ø—Ä–∏–º–µ—Ä–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if small_dataset:
            sample = small_dataset[0]
            print(f"   üìã –ü—Ä–∏–º–µ—Ä: —Å–ª–æ–∂–Ω–æ—Å—Ç—å {sample.difficulty}, –æ—Ç–≤–µ—Ç {sample.answer}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")

    print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def run_full_pipeline():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏"""
    print("=== –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù ===\n")

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    create_training_dataset(total_samples=5000, save_path="training_dataset.pkl")

    print("2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    DCCircuitDataset.create_test_datasets(
        difficulties=[1, 3, 5, 7, 9],
        samples_per_difficulty=100
    )

    # 2. RL –æ–±—É—á–µ–Ω–∏–µ —Å GRPO
    print("\n3. RL –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–µ–π...")
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        config = TrainingConfig(
            model_name=get_model_name('debug'),
            max_steps=10,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç
            per_device_train_batch_size=1,
            num_generations=4,  # –ú–µ–Ω—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
            lora_r=16,  # –ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            output_dir="./test_model"
        )

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = DCCircuitRLTrainer(config)
        trainer.setup_model_and_tokenizer()
        trainer.setup_trainer()
        trainer.train()

        print("‚úì RL –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RL –æ–±—É—á–µ–Ω–∏—è: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install unsloth trl peft")

    # 3. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π —Å LM Studio API
    print(f"\n4. –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Å LM Studio API ({get_model_name('debug')})...")
    try:
        baseline_results, trained_results = generate_full_report(
            baseline_model=get_model_name('debug'),
            trained_model="./dc_circuit_model_grpo"
        )
        print("‚úì –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å LM Studio API!")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á (–¥–µ—Ç–∞–ª—å–Ω–∞—è)")
        print("2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")
        print("3. –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (CPU)")
        print("6. –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        print("7. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏)")
        print("8. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("9. –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (–æ–±—É—á–µ–Ω–∏–µ + –æ—Ü–µ–Ω–∫–∞)")
        print("10. RL –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–µ–π")
        print("11. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π")
        print("12. –í—ã—Ö–æ–¥")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-12): ").strip()

        if choice == "1":
            demo_circuit_generation()
        elif choice == "2":
            demo_verification()
        elif choice == "3":
            demo_basic_generation()
        elif choice == "4":
            demo_different_difficulties()
        elif choice == "5":
            test_model_simple()
        elif choice == "6":
            run_simple_training()
        elif choice == "7":
            validate_system()
        elif choice == "8":
            print("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            validate_system()
        elif choice == "9":
            run_full_pipeline()
        elif choice == "10":
            print("–ó–∞–ø—É—Å–∫–∞—é RL –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–µ–π...")
            try:
                config = TrainingConfig(
                    model_name=get_model_name('debug'),
                    max_steps=50,
                    output_dir="./dc_circuit_model_rl"
                )
                trainer = DCCircuitRLTrainer(config)
                trainer.setup_model_and_tokenizer()
                trainer.setup_trainer()
                trainer.train()
                print("‚úÖ RL –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ RL –æ–±—É—á–µ–Ω–∏—è: {e}")
                print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install unsloth trl peft")
        elif choice == "11":
            print("–ó–∞–ø—É—Å–∫–∞—é –æ—Ü–µ–Ω–∫—É –º–æ–¥–µ–ª–µ–π...")
            try:
                baseline_results, trained_results = generate_full_report()
                print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
        elif choice == "12":
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()