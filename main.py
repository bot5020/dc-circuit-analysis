"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ DC Circuit Analysis Environment

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
- –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from dc_circuit.game import DCCircuitGame


def demo_circuit_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    print("="*80)
    print("üîå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ó–ê–î–ê–ß")
    print("="*80)

    game = DCCircuitGame()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    for difficulty in [1, 3, 5]:
        print(f"\n--- –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty} ---")

        data_list = game.generate(num_of_questions=1, difficulty=difficulty)

        if data_list:
            data = data_list[0]
            print(f"–ó–∞–¥–∞—á–∞: {data.question[:100]}...")
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data.answer}")
            print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {data.metadata.get('circuit_type', 'unknown')}, "
                  f"{data.metadata.get('question_type', 'unknown')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")


def demo_verification():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    print("\n" + "="*80)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    print("="*80)
    
    game = DCCircuitGame()
    data_list = game.generate(num_of_questions=1, difficulty=1)
    
    if data_list:
        data = data_list[0]
        print(f"\n–ó–∞–¥–∞—á–∞: {data.question[:80]}...")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data.answer}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        test_cases = [
            (f"<answer>{data.answer}</answer>", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ —Ç–µ–≥–∞—Ö"),
            (f"The answer is {data.answer}", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º"),
            ("999.999", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"),
            ("<answer>not_a_number</answer>", "–ù–µ—á–∏—Å–ª–æ–≤–æ–π")
        ]
        
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        for test_answer, description in test_cases:
            is_correct = game.verify(data, test_answer)
            print(f"  {'‚úÖ' if is_correct else '‚ùå'} {description}: '{test_answer}'")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏")


def validate_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    print("\n" + "="*80)
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("="*80)

    game = DCCircuitGame()

    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á...")
    for difficulty in [1, 3, 5]:
        tasks = game.generate(num_of_questions=3, difficulty=difficulty, max_attempts=20)
        if tasks:
            print(f"  ‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty}: {len(tasks)} –∑–∞–¥–∞—á")
        else:
            print(f"  ‚ùå –°–ª–æ–∂–Ω–æ—Å—Ç—å {difficulty}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")

    # –¢–µ—Å—Ç 2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é...")
    test_task = game.generate(num_of_questions=1, difficulty=1)[0]
    
    test_cases = [
        (f"<answer>{test_task.answer}</answer>", True, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"),
        ("999.999", False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"),
    ]
    
    for test_answer, expected, desc in test_cases:
        is_correct = game.verify(test_task, test_answer)
        status = "‚úÖ" if is_correct == expected else "‚ùå"
        print(f"  {status} {desc}: {is_correct == expected}")

    # –¢–µ—Å—Ç 3: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã...")
    if hasattr(game, '_calculators') and game._calculators:
        print(f"  ‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(game._calculators)} —Ç–∏–ø–æ–≤")
        for calc_type in game._calculators.keys():
            print(f"     - {calc_type}")
    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
        _ = game.generate(1, difficulty=1)
        if hasattr(game, '_calculators'):
            print(f"  ‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(game._calculators)} —Ç–∏–ø–æ–≤")

    print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def simple_demo():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("\n" + "="*80)
    print("üöÄ –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("="*80)

    print("\n1. –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É...")
    game = DCCircuitGame()

    print("2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É...")
    tasks = game.generate(num_of_questions=1, difficulty=1)

    if tasks:
        task = tasks[0]
        print(f"\nüìù –í–æ–ø—Ä–æ—Å:\n{task.question}\n")
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.answer}")
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        print("\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä...")
        is_correct = game.verify(task, f"<answer>{task.answer}</answer>")
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚úÖ –í–ï–†–ù–û' if is_correct else '‚ùå –ù–ï–í–ï–†–ù–û'}")

        is_incorrect = game.verify(task, "<answer>999.999</answer>")
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚ùå –ù–ï–í–ï–†–ù–û' if not is_incorrect else '‚úÖ –í–ï–†–ù–û'}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é."""
    
    while True:
        print("\n" + "="*80)
        print("="*80)
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("  1. –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        print("  2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á")
        print("  3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("  4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("  5. –í—ã—Ö–æ–¥")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()

        if choice == "1":
            simple_demo()
        elif choice == "2":
            demo_circuit_generation()
        elif choice == "3":
            demo_verification()
        elif choice == "4":
            validate_system()
        elif choice == "5":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
